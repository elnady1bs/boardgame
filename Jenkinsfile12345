pipeline {
    agent {
        label "Jenkins-agent"
    }
    tools {
        jdk 'Java17'
        maven 'Maven3' // Ensure 'Maven3' matches the name in your Jenkins configuration
    }
    environment {
        APP_NAME = "boardgame"
        RELEASE = "1.0.0"
        DOCKER_USER = "elnady1bs"
        DOCKER_PASS = credentials('dockerhub') // Use Jenkins credentials securely
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs() // Ensure this step is invoked with parentheses
            }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', url: 'https://github.com/elnady1bs/gameapp.git'
            }
        }
        
        stage("Build Application") {
            steps {
                sh "mvn clean package"
            }
        }

        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }

        stage("Test Application") {
            steps {
                sh "mvn test"
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                script {
                    withSonarQubeEnv('jenkins-sonarqube-token') {
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage("Publish to Nexus") {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', maven: 'Maven3') {
                    sh "mvn deploy"
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image = docker.build("${IMAGE_NAME}")
                    }
                    
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
    }
}
